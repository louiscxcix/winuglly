import streamlit as st
import google.generativeai as genai
import textwrap

# --- 페이지 기본 설정 ---
st.set_page_config(
    page_title="Win Ugly 전략 분석기",
    page_icon="🥊",
    layout="centered"
)

# --- Gemini API 키 설정 ---
# Streamlit 배포 시에는 st.secrets를 사용하는 것이 가장 안전합니다.
# 로컬에서 테스트할 경우:
# 1. 프로젝트 폴더에 .streamlit/secrets.toml 파일을 생성합니다.
# 2. 파일 안에 GOOGLE_API_KEY = "YOUR_API_KEY" 형식으로 키를 저장합니다.
try:
    # Streamlit의 secrets 관리 기능을 통해 API 키를 안전하게 불러옵니다.
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except Exception as e:
    # API 키 설정에 실패하면 에러 메시지를 표시하고 앱 실행을 중지합니다.
    st.error("Gemini API 키를 설정하는 데 문제가 발생했습니다. .streamlit/secrets.toml 파일을 확인해주세요.")
    st.stop()


def get_gemini_feedback(user_strategy_input):
    """
    Gemini API를 호출하여 사용자의 전략에 대한 피드백을 생성합니다.
    HTML/JS 버전과 동일한 프롬프트를 사용합니다.
    """
    # Gemini 모델에 전달할 프롬프트입니다.
    prompt = f"""
        당신은 'Win Ugly' 전략에 특화된 코치입니다. 'Win Ugly'는 어떤 상황에서든 이상적이지 않거나 완벽하지 않더라도, 오직 승리라는 목표 달성을 위해 필요한 최소한의 자원과 수단을 활용하고, 때로는 비합리적이거나 비정상적인 방법까지도 불사하는 '독한 선수'의 정신을 의미합니다.

        아래 4단계 코칭 틀에 따라 사용자의 입력에 대해 상세하게 분석하고 피드백을 제공해 주세요. **4단계 'Win Ugly' 코칭 틀:**
        1.  **종합 진단 (Overall Diagnosis):**
            * 피드백의 가장 첫 부분으로, 사용자의 전략이 'Win Ugly' 철학에 얼마나 부합하는지를 한눈에 파악할 수 있도록 진단합니다.
            * **내용:** 사용자의 전략을 전반적으로 평가하여 현재 '독한 선수'에 가까운지, 아니면 '착한 선수'에 가까운지를 명확히 언급합니다.
            * **예시:** "입력하신 전략을 분석한 결과, 당신은 'Win Ugly'의 필요성을 이해하고 있지만 아직 결정적인 순간에 주저하는 '착한 선수'의 모습이 남아있습니다."

        2.  **칭찬할 점 (Ugly Points 🥊):**
            * 긍정적인 부분을 먼저 언급하여 사용자에게 동기부여와 자신감을 줍니다. 'Win Ugly' 관점에서 잘하고 있는 부분을 구체적으로 짚어줍니다.
            * **내용:** 사용자가 작성한 문장을 직접 인용하여 'Win Ugly' 원칙에 부합하는 부분을 칭찬합니다. 왜 그것이 '독한(Ugly)' 생각인지 근거를 함께 제시합니다.
            * **예시:**
                * "**'어떤 상황이 와도 긍정적으로 생각하겠다'**고 하신 부분은 매우 훌륭합니다. 이는 스코어나 상대에게 위축되지 않고, 어떤 상황에서도 초긍정적인 태도를 갖는 'Win Ugly'의 핵심 자세입니다."
                * "**'동료들을 계속 격려하겠다'**는 전략은 팀의 정신력 끈을 놓지 않게 하는 중요한 'Ugly' 전략입니다."

        3.  **보완할 점 (Nice Points 😇):**
            * 가장 중요한 부분으로, 개선이 필요한 '착한' 생각이나 행동을 지적하고 구체적인 대안을 제시합니다. 비판이 아닌 성장을 위한 코칭의 관점으로 접근합니다.
            * **내용:** 사용자의 문장을 인용하여 'Win Ugly' 원칙에 위배되는 부분을 지적합니다. 그리고 그것을 어떻게 '독한(Ugly)' 전략으로 바꿀 수 있는지 구체적인 행동 지침을 제공합니다.
            * **예시:**
                * "**'실수하지 않도록 노력하겠다'**는 다짐은 '실점하지 말자'는 소극적이고 착한 생각에 가깝습니다. 그 대신 **'안전한 수비를 바탕으로 허를 찌르는 공격을 시도하겠다'**처럼 구체적이고 적극적인 임무에 집중해 보세요."
                * "**'관중들 앞에서 좋은 모습을 보여주고 싶다'**는 마음은 주변을 의식하게 만들어 플레이를 위축시킬 수 있습니다. 시합 중에는 **'관중은 돌멩이다'**라고 생각하며 오직 경기에만 몰입해야 합니다."

        4.  **당신의 'Win Ugly' 미션 (Your 'Win Ugly' Mission):**
            * 피드백의 마지막 부분으로, 사용자가 다음 시합에서 즉시 실행할 수 있는 가장 중요한 핵심 행동 2~3가지를 미션 형태로 요약하여 제시합니다.
            * **내용:** 위 분석 내용을 바탕으로 사용자가 가장 먼저 개선해야 할 점들을 짧고 명료한 문장으로 정리합니다.
            * **예시:**
                * 당신의 미션:
                * 미션 1: 실수에 대한 두려움을 버리고, 오직 '나의 작전과 임무'에만 집중하기.
                * 미션 2: 불안한 마음이 들어도 의식적으로 '자신감 있는' 제스처 취하기.
                * 미션 3: 패배의 두려움이 들 때마다 '승리의 불합리한 보상 구조'를 떠올리며 독한 마음 다잡기.

        **사용자 입력:** "{user_strategy_input}"

        **출력 형식:** 위 4단계 코칭 틀에 따라 각 항목에 대한 상세한 설명을 Markdown 형식으로 제공하고, 특히 '칭찬할 점'과 '보완할 점'에서는 사용자 입력의 문장을 직접 인용하여 구체적으로 피드백해 주세요. 마지막으로 'Win Ugly' 미션을 명확하게 제시해 주세요.
    """
    # 사용할 Gemini 모델을 선택합니다.
    model = genai.GenerativeModel('gemini-2.5-flash-preview-05-20')
    # 모델에 프롬프트를 전달하여 콘텐츠 생성을 요청합니다.
    response = model.generate_content(prompt)
    # 생성된 텍스트를 반환합니다.
    return response.text


# --- Streamlit UI 구성 ---

# 앱의 제목과 부제목을 표시합니다.
st.title("Win Ugly 전략 분석기 🥊")
st.markdown("#### 승리를 위한 '독한' 마음가짐, 지금 바로 진단받으세요.")
st.markdown("---")

# 사용자 입력을 받는 텍스트 영역을 만듭니다.
user_strategy = st.text_area(
    "**당신의 'Win Ugly' 전략을 아래에 입력하세요**",
    height=200,
    placeholder="예시: 저는 이번 경기에서 절대 실수하지 않도록 최선을 다하고, 동료들을 격려하며, 관중들에게 좋은 모습을 보여주고 싶습니다. 어떤 상황에서도 긍정적인 마음을 잃지 않겠습니다."
)

# '분석 시작하기' 버튼을 만듭니다.
if st.button("분석 시작하기", type="primary", use_container_width=True):
    # 사용자가 전략을 입력했는지 확인합니다.
    if user_strategy:
        # 분석이 진행되는 동안 로딩 스피너를 표시합니다.
        with st.spinner("AI 코치가 당신의 전략을 심층 분석하고 있습니다..."):
            try:
                # Gemini API를 호출하여 피드백을 받아옵니다.
                feedback = get_gemini_feedback(user_strategy)
                
                # 결과 출력 영역
                st.markdown("---")
                st.subheader("🏆 당신을 위한 Win Ugly 코칭 리포트")
                # Markdown 형식의 피드백을 화면에 예쁘게 표시합니다.
                st.markdown(feedback)
            except Exception as e:
                # API 호출 등에서 에러가 발생하면 에러 메시지를 표시합니다.
                st.error(f"분석 중 오류가 발생했습니다: {e}")
    else:
        # 사용자가 아무것도 입력하지 않고 버튼을 누르면 경고 메시지를 표시합니다.
        st.warning("분석할 전략을 입력해주세요.")
